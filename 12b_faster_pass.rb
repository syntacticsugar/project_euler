=begin

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 

         The first ten terms would be:

         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
          1: 1
          3: 1,3
          6: 1,2,3,6
         10: 1,2,5,10
         15: 1,3,5,15
         21: 1,3,7,21
         28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

=end

triangular = ->x { 1.upto(x).inject :+ } # triangular[7] => 28
list_factors = ->number { 1.upto(number).select { |k| (number % k).zero? }} # list_factors[28] => [1, 2, 4, 7, 14, 28]
##########################################
module Raul
  def self.triangular number
    a = ((number + 1) * number) / 2
  end
  def self.count_factors number
    top_half = 1.upto(Math.sqrt(number).to_i).select do |k|
      (number % k).zero?
    end
    if Math.sqrt(number).to_i** 2 == number
      ((top_half.length)*2) - 1
    else
      top_half.length * 2
    end
  end
#   def self.count_factors number
#     1.upto(Math.sqrt(number).to_i).select do |k|
#       (number % k).zero?
#     end
#   end
end

# .find -> returns the first true instance
# until

i = 1
while (Raul.count_factors(Raul.triangular(i)) < 500)
  puts i.to_s + ", " + Raul.triangular(i).to_s
  i += 1
end
puts i.to_s + ", " + Raul.triangular(i).to_s
